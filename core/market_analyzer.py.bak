import pandas as pd
import numpy as np
from typing import Dict, Any, Tuple, List, Optional, Union
import logging
from datetime import datetime
from decimal import Decimal

logger = logging.getLogger(__name__)

class MarketAnalyzer:
    def __init__(self):
        self.volatility_thresholds = {
            'very_low': 0.005,
            'low': 0.01,
            'medium': 0.02,
            'high': 0.03,
            'very_high': 0.05
        }
        self.rsi_periods = {
            'short': 14,  # 기본 RSI 기간
            'long': 28    # 장기 RSI 기간
        }
        self.rsi_thresholds = {
            'overbought': 70,
            'oversold': 30
        }
        self.dynamic_rsi_thresholds = {
            'uptrend': {
                'overbought': 60,
                'oversold': 40
            },
            'sideways': {
                'overbought': 70,
                'oversold': 30
            },
            'downtrend': {
                'overbought': 70,
                'oversold': 30
            }
        }
        self.bb_periods = {
            'short': 20,
            'long': 50
        }
        self.bb_std = {
            'short': 2.0,
            'long': 2.5
        }
        self.macd_params = {
            'fast': 12,
            'slow': 26,
            'signal': 9
        }
        self.fibonacci_levels = [0.236, 0.382, 0.5, 0.618, 0.786]
        self.stoch_params = {'k': 14, 'd': 3, 'smooth': 3}
        self.adx_period = 14
        self.min_data_points = 100  # 최소 필요한 데이터 포인트 수
        self.logger = logging.getLogger(__name__)
        
    def _validate_data(self, df: pd.DataFrame) -> bool:
        """데이터 유효성 검증"""
        try:
            # 최소 데이터 포인트 확인
            if len(df) < self.min_data_points:
                return False
                
            # 필수 컬럼 확인
            required_columns = ['open', 'high', 'low', 'close', 'volume']
            if not all(col in df.columns for col in required_columns):
                return False
                
            # NaN 값 확인
            if df[required_columns].isnull().any().any():
                return False
                
            # 데이터 타입 검증
            for col in required_columns:
                if not pd.api.types.is_numeric_dtype(df[col]):
                    return False
                    
            return True
            
        except Exception:
            return False

    def analyze_market_condition(self, market_data: Dict[str, Any]) -> Dict[str, Any]:
        """시장 상태 종합 분석"""
        try:
            if not market_data or not isinstance(market_data, dict):
                return None
                
            # ADX 기반 시장 레짐 확인
            adx_analysis = market_data.get('adx_analysis')
            if not adx_analysis:
                return None
                
            adx_value = adx_analysis.get('adx', 0)
            market_regime = 'sideways' if adx_value < 20 else 'trend'
            
            # 레짐별 분석 결과
            if market_regime == 'trend':
                # 추세장: RSI, MACD, 볼린저 밴드 분석
                rsi_analysis = market_data.get('rsi_analysis')
                macd_analysis = market_data.get('macd_analysis')
                bb_analysis = market_data.get('bollinger_analysis')
                
                if not all([rsi_analysis, macd_analysis, bb_analysis]):
                    return None
                
                # 상승/하락 추세 판단
                trend_direction = 'up' if adx_analysis.get('trend_direction') == 'up' and adx_value >= 25 else 'down'
                
                return {
                    'regime': 'trend',
                    'trend_direction': trend_direction,
                    'adx_value': adx_value,
                    'rsi_value': rsi_analysis.get('value', 0),
                    'macd_state': macd_analysis.get('state', ''),
                    'macd_cross': macd_analysis.get('hist_cross', ''),
                    'bb_state': bb_analysis.get('state', ''),
                    'bb_position': bb_analysis.get('position', '')
                }
                
            else:
                # 횡보장: RSI, 스토캐스틱, 볼린저 밴드 분석
                rsi_analysis = market_data.get('rsi_analysis')
                stoch_analysis = market_data.get('stochastic_analysis')
                bb_analysis = market_data.get('bollinger_analysis')
                
                if not all([rsi_analysis, stoch_analysis, bb_analysis]):
                    return None
                    
                return {
                    'regime': 'sideways',
                    'adx_value': adx_value,
                    'rsi_value': rsi_analysis.get('value', 0),
                    'stoch_state': stoch_analysis.get('state', ''),
                    'stoch_cross': stoch_analysis.get('cross', ''),
                    'bb_state': bb_analysis.get('state', ''),
                    'bb_position': bb_analysis.get('position', '')
                }
                
        except Exception as e:
            logger.error(f"시장 상태 분석 중 오류 발생: {e}")
            return None

    def calculate_volatility(self, data: pd.DataFrame) -> float:
        """변동성 계산"""
        try:
            if len(data) < 2:
                logger.warning("데이터가 충분하지 않아 기본 변동성 값을 사용합니다.")
                return 0.02  # 2% 기본값
            
            # 종가 기반 수익률 계산
            returns = data['close'].pct_change().dropna()
            
            if len(returns) < 2:
                logger.warning("유효한 수익률 데이터가 부족하여 기본 변동성 값을 사용합니다.")
                return 0.02
            
            # 이상치 제거 (3 표준편차 이상)
            std = returns.std()
            mean = returns.mean()
            returns = returns[(returns > mean - 3*std) & (returns < mean + 3*std)]
            
            if len(returns) < 2:
                logger.warning("이상치 제거 후 유효한 데이터가 부족하여 기본 변동성 값을 사용합니다.")
                return 0.02
            
            # 연간화된 변동성 계산
            volatility = returns.std() * np.sqrt(252)  # 252는 연간 거래일 수
            
            if np.isnan(volatility) or volatility <= 0:
                logger.warning("유효하지 않은 변동성 값이 계산되어 기본값을 사용합니다.")
                return 0.02
            
            return float(volatility)
            
        except Exception as e:
            logger.error(f"변동성 계산 중 오류 발생: {e}")
            return 0.02

    def analyze_trend(self, df: pd.DataFrame) -> Optional[Dict[str, Any]]:
        """트렌드 분석"""
        try:
            if len(df) < 50:  # 최소 데이터 포인트 수정
                return None
                
            # 이동평균 계산
            ma_short = df['close'].rolling(window=20).mean()
            ma_medium = df['close'].rolling(window=50).mean()
            
            # 트렌드 강도 계산
            trend_strength = self._calculate_trend_strength(ma_short, ma_medium)
            
            return {
                'short_term': float(ma_short.iloc[-1]),
                'medium_term': float(ma_medium.iloc[-1]),
                'strength': float(trend_strength),
                'direction': 'up' if ma_short.iloc[-1] > ma_medium.iloc[-1] else 'down'
            }
            
        except Exception:
            return None

    def _calculate_trend_strength(self, ma_short: Optional[pd.Series] = None, ma_medium: Optional[pd.Series] = None, analysis: Optional[Dict] = None) -> Union[float, str]:
        """트렌드 강도 계산
        
        Args:
            ma_short: 단기 이동평균
            ma_medium: 중기 이동평균
            analysis: 시장 분석 데이터
            
        Returns:
            float 또는 str: 트렌드 강도 값 또는 상태
        """
        try:
            # 이동평균 기반 계산
            if ma_short is not None and ma_medium is not None:
                if ma_medium.iloc[-1] == 0:
                    return 0.5
                    
                short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
                strength = abs(short_vs_medium)
                return float(min(max(strength, 0), 1))
                
            # 분석 데이터 기반 계산
            elif analysis is not None:
                volatility = analysis.get('volatility', 0)
                
                if volatility > self.volatility_thresholds['very_high']:
                    return 'very_strong'
                elif volatility > self.volatility_thresholds['high']:
                    return 'strong'
                elif volatility > self.volatility_thresholds['medium']:
                    return 'moderate'
                elif volatility > self.volatility_thresholds['low']:
                    return 'weak'
                else:
                    return 'very_weak'
                    
            return 0.5  # 기본값
            
        except Exception as e:
            logger.error(f"트렌드 강도 계산 중 오류 발생: {e}")
            return 0.5

    def analyze_volume(self, df: pd.DataFrame) -> Optional[Dict[str, Any]]:
        """거래량 분석"""
        try:
            if len(df) < 20:  # 이동평균을 위한 최소 데이터 필요
                logger.warning("거래량 분석을 위한 데이터가 부족합니다.")
                return None
                
            # 거래량 이동평균
            volume_ma = df['volume'].rolling(window=20).mean()
            volume_ratio = df['volume'].iloc[-1] / volume_ma.iloc[-1]
            
            # VWAP 계산
            vwap = (df['volume'] * (df['high'] + df['low'] + df['close']) / 3).cumsum() / df['volume'].cumsum()
            
            return {
                'volume_ma': float(volume_ma.iloc[-1]),
                'volume_ratio': float(volume_ratio),
                'vwap': float(vwap.iloc[-1]),
                'volume_trend': 'increasing' if volume_ratio > 1.2 else 'decreasing'
            }
            
        except Exception as e:
            logger.error(f"거래량 분석 중 오류 발생: {e}")
            return None

    def get_dynamic_rsi_thresholds(self, market_state: str) -> Dict[str, int]:
        """시장 상황에 따른 RSI 임계값 반환"""
        try:
            if market_state in ['strong_uptrend', 'bullish_momentum']:
                return self.dynamic_rsi_thresholds['uptrend']
            elif market_state in ['high_volatility', 'wide_range']:
                return self.dynamic_rsi_thresholds['sideways']
            elif market_state in ['strong_downtrend', 'bearish_momentum']:
                return self.dynamic_rsi_thresholds['downtrend']
            else:
                return self.rsi_thresholds
        except Exception as e:
            logger.error(f"동적 RSI 임계값 조회 중 오류 발생: {e}")
            return self.rsi_thresholds

    def analyze_rsi(self, df: pd.DataFrame) -> Optional[Dict[str, Any]]:
        """RSI 분석"""
        try:
            if len(df) < self.rsi_periods['long']:
                logger.warning("RSI 분석을 위한 데이터가 부족합니다.")
                return None
                
            # 가격 변화 계산
            delta = df['close'].diff()
            
            # 단기 RSI
            gain = (delta.where(delta > 0, 0)).rolling(window=self.rsi_periods['short']).mean()
            loss = (-delta.where(delta < 0, 0)).rolling(window=self.rsi_periods['short']).mean()
            rs = gain / loss
            rsi_short = 100 - (100 / (1 + rs))
            
            # 장기 RSI
            gain_long = (delta.where(delta > 0, 0)).rolling(window=self.rsi_periods['long']).mean()
            loss_long = (-delta.where(delta < 0, 0)).rolling(window=self.rsi_periods['long']).mean()
            rs_long = gain_long / loss_long
            rsi_long = 100 - (100 / (1 + rs_long))
            
            # 시장 상태 확인
            market_state = self._determine_market_state({
                'rsi': {'short_term': float(rsi_short.iloc[-1]), 'long_term': float(rsi_long.iloc[-1])},
                'volatility': self.calculate_volatility(df),
                'trend': self.analyze_trend(df)
            })
            
            # 동적 RSI 임계값 적용
            thresholds = self.get_dynamic_rsi_thresholds(market_state)
            
            # RSI 상태 판단
            current_rsi_short = rsi_short.iloc[-1]
            current_rsi_long = rsi_long.iloc[-1]
            
            rsi_state = 'neutral'
            if current_rsi_short > thresholds['overbought']:
                rsi_state = 'overbought'
            elif current_rsi_short < thresholds['oversold']:
                rsi_state = 'oversold'
                
            # RSI 다이버전스 확인
            divergence = self._check_rsi_divergence(df, rsi_short)
            
            return {
                'short_term': float(current_rsi_short),
                'long_term': float(current_rsi_long),
                'state': rsi_state,
                'divergence': divergence,
                'trend': 'up' if current_rsi_short > current_rsi_long else 'down',
                'thresholds': thresholds
            }
            
        except Exception as e:
            logger.error(f"RSI 분석 중 오류 발생: {e}")
            return None

    def _check_rsi_divergence(self, df: pd.DataFrame, rsi: pd.Series) -> str:
        """RSI 다이버전스 확인"""
        try:
            lookback = 20
            if len(df) < lookback:
                return 'none'
                
            # 상승 다이버전스
            if (df['low'].iloc[-1] < df['low'].iloc[-lookback] and 
                rsi.iloc[-1] > rsi.iloc[-lookback]):
                return 'bullish'
                
            # 하락 다이버전스
            if (df['high'].iloc[-1] > df['high'].iloc[-lookback] and 
                rsi.iloc[-1] < rsi.iloc[-lookback]):
                return 'bearish'
                
            return 'none'
            
        except Exception as e:
            logger.error(f"RSI 다이버전스 확인 중 오류 발생: {e}")
            return 'none'

    def analyze_bollinger_bands(self, df: pd.DataFrame) -> Optional[Dict[str, Any]]:
        """볼린저 밴드 분석"""
        try:
            if len(df) < self.bb_periods['long']:
                logger.warning("볼린저 밴드 분석을 위한 데이터가 부족합니다.")
                return None
                
            # 단기 볼린저 밴드
            bb_short = self.calculate_bollinger_bands(df, self.bb_periods['short'], self.bb_std['short'])
            
            # 장기 볼린저 밴드
            bb_long = self.calculate_bollinger_bands(df, self.bb_periods['long'], self.bb_std['long'])
            
            current_price = df['close'].iloc[-1]
            bb_short_upper = bb_short['upper'].iloc[-1]
            bb_short_middle = bb_short['middle'].iloc[-1]
            bb_short_lower = bb_short['lower'].iloc[-1]
            
            # ATR 계산
            atr = self.calculate_atr(df, period=14)
            current_atr = atr.iloc[-1]
            avg_atr = atr.rolling(window=20).mean().iloc[-1]
            
            # 거래량 분석
            volume_ma = df['volume'].rolling(window=20).mean()
            current_volume = df['volume'].iloc[-1]
            volume_ratio = current_volume / volume_ma.iloc[-1]
            
            # 시장 상태 판단
            is_sideways = current_atr < avg_atr * 0.8  # ATR이 평균의 80% 미만일 때 횡보장으로 판단
            
            # 볼린저 밴드 상태
            bb_state = 'normal'
            if current_price > bb_short_upper:
                if is_sideways:
                    bb_state = 'upper_touch'  # 횡보장에서는 터치로만 판단
                elif volume_ratio >= 1.2:  # 거래량이 평균의 1.2배 이상일 때만 돌파로 판단
                    bb_state = 'upper_break'
            elif current_price < bb_short_lower:
                if is_sideways:
                    bb_state = 'lower_touch'  # 횡보장에서는 터치로만 판단
                elif volume_ratio >= 1.2:  # 거래량이 평균의 1.2배 이상일 때만 돌파로 판단
                    bb_state = 'lower_break'
                    
            # 볼린저 밴드 폭
            bb_width = (bb_short_upper - bb_short_lower) / bb_short_middle
            
            return {
                'short': {
                    'upper': float(bb_short_upper),
                    'middle': float(bb_short_middle),
                    'lower': float(bb_short_lower)
                },
                'long': {
                    'upper': float(bb_long['upper'].iloc[-1]),
                    'middle': float(bb_long['middle'].iloc[-1]),
                    'lower': float(bb_long['lower'].iloc[-1])
                },
                'state': bb_state,
                'width': float(bb_width),
                'squeeze': bb_width < 0.1,
                'volume_ratio': float(volume_ratio),
                'is_sideways': is_sideways,
                'atr': {
                    'current': float(current_atr),
                    'average': float(avg_atr)
                }
            }
            
        except Exception as e:
            logger.error(f"볼린저 밴드 분석 중 오류 발생: {e}")
            return None

    def calculate_bollinger_bands(self, data: pd.DataFrame, period: int = 20, std: float = 2.0) -> Dict[str, pd.Series]:
        """볼린저 밴드 계산"""
        try:
            if len(data) < period:
                logger.warning(f"데이터가 충분하지 않습니다. 최소 {period}개의 데이터 포인트가 필요합니다.")
                return {
                    'middle': pd.Series([data['close'].iloc[-1]] * len(data), index=data.index),
                    'upper': pd.Series([data['close'].iloc[-1]] * len(data), index=data.index),
                    'lower': pd.Series([data['close'].iloc[-1]] * len(data), index=data.index)
                }

            # 종가 데이터 가져오기
            close = data['close'].copy()
            
            # NaN 값 처리
            if close.isnull().any():
                close = close.fillna(method='ffill').fillna(method='bfill')
                logger.warning("종가 데이터에 NaN 값이 존재하여 전진/후진 채움을 수행했습니다.")

            # 중간 밴드 (SMA) 계산
            middle = close.rolling(window=period, min_periods=1).mean()
            
            # 표준편차 계산
            std_dev = close.rolling(window=period, min_periods=1).std()
            
            # 상단/하단 밴드 계산
            upper = middle + (std_dev * std)
            lower = middle - (std_dev * std)
            
            # 결과 딕셔너리 생성
            result = {
                'middle': middle,
                'upper': upper,
                'lower': lower
            }
            
            # NaN 값이 있는지 확인
            for key, value in result.items():
                if value.isnull().any():
                    logger.warning(f"{key} 밴드에 NaN 값이 존재합니다.")
                    result[key] = value.fillna(method='ffill').fillna(method='bfill')
            
            return result
            
        except Exception as e:
            logger.error(f"볼린저 밴드 계산 중 오류 발생: {e}")
            # 오류 발생 시 기본값 반환
            return {
                'middle': pd.Series([data['close'].iloc[-1]] * len(data), index=data.index),
                'upper': pd.Series([data['close'].iloc[-1]] * len(data), index=data.index),
                'lower': pd.Series([data['close'].iloc[-1]] * len(data), index=data.index)
            }

    def calculate_atr(self, df: pd.DataFrame, period: int = 14) -> pd.Series:
        """ATR(평균 실제 범위) 계산"""
        try:
            high = df['high']
            low = df['low']
            close = df['close']
            
            tr1 = high - low
            tr2 = abs(high - close.shift())
            tr3 = abs(low - close.shift())
            
            tr = pd.concat([tr1, tr2, tr3], axis=1).max(axis=1)
            atr = tr.rolling(window=period).mean()
            
            return atr
            
        except Exception as e:
            logger.error(f"ATR 계산 중 오류 발생: {e}")
            return pd.Series([0] * len(df), index=df.index)

    def analyze_macd(self, df: pd.DataFrame) -> Optional[Dict[str, Any]]:
        """MACD 분석"""
        try:
            if len(df) < self.macd_params['slow']:
                logger.warning("MACD 분석을 위한 데이터가 부족합니다.")
                return None
                
            exp1 = df['close'].ewm(span=self.macd_params['fast'], adjust=False).mean()
            exp2 = df['close'].ewm(span=self.macd_params['slow'], adjust=False).mean()
            macd = exp1 - exp2
            signal = macd.ewm(span=self.macd_params['signal'], adjust=False).mean()
            histogram = macd - signal
            
            current_macd = macd.iloc[-1]
            current_signal = signal.iloc[-1]
            current_hist = histogram.iloc[-1]
            
            # MACD 히스토그램 0 돌파 후 1-2봉 지연 확인
            hist_cross = 'none'
            if current_hist > 0 and histogram.iloc[-2] <= 0:
                # 0 돌파 후 1-2봉 확인
                if len(histogram) >= 3:
                    if histogram.iloc[-3] <= 0:  # 2봉 전에도 0 이하였다면
                        hist_cross = 'bullish'
            elif current_hist < 0 and histogram.iloc[-2] >= 0:
                # 0 돌파 후 1-2봉 확인
                if len(histogram) >= 3:
                    if histogram.iloc[-3] >= 0:  # 2봉 전에도 0 이상이었다면
                        hist_cross = 'bearish'
            
            # MACD 상태
            macd_state = 'neutral'
            if hist_cross == 'bullish':
                macd_state = 'bullish'
            elif hist_cross == 'bearish':
                macd_state = 'bearish'
                
            # MACD 히스토그램 방향
            hist_direction = 'up' if current_hist > histogram.iloc[-2] else 'down'
            
            return {
                'macd': float(current_macd),
                'signal': float(current_signal),
                'histogram': float(current_hist),
                'state': macd_state,
                'hist_direction': hist_direction,
                'hist_cross': hist_cross
            }
            
        except Exception as e:
            logger.error(f"MACD 분석 중 오류 발생: {e}")
            return None

    def analyze_fibonacci(self, df: pd.DataFrame) -> Optional[Dict[str, Any]]:
        """피보나치 분석"""
        try:
            lookback = 100
            if len(df) < lookback:
                logger.warning("피보나치 분석을 위한 데이터가 부족합니다.")
                return None
                
            high = df['high'].rolling(window=lookback).max()
            low = df['low'].rolling(window=lookback).min()
            
            current_high = high.iloc[-1]
            current_low = low.iloc[-1]
            current_price = df['close'].iloc[-1]
            
            diff = current_high - current_low
            if diff == 0:
                logger.warning("피보나치 레벨 계산을 위한 가격 범위가 0입니다.")
                return None
                
            levels = {
                '0': float(current_low),
                '0.236': float(current_low + diff * 0.236),
                '0.382': float(current_low + diff * 0.382),
                '0.5': float(current_low + diff * 0.5),
                '0.618': float(current_low + diff * 0.618),
                '0.786': float(current_low + diff * 0.786),
                '1': float(current_high)
            }
            
            current_level = None
            for level, price in levels.items():
                if current_price <= price:
                    current_level = level
                    break
                    
            return {
                'levels': levels,
                'current_level': current_level,
                'high': float(current_high),
                'low': float(current_low),
                'retracement': float((current_price - current_low) / diff)
            }
            
        except Exception as e:
            logger.error(f"피보나치 분석 중 오류 발생: {e}")
            return None

    def analyze_ichimoku(self, df: pd.DataFrame) -> Optional[Dict[str, Any]]:
        """일목균형표 분석"""
        try:
            if len(df) < 52:  # 최장 기간 이동평균을 위한 최소 데이터 필요
                logger.warning("일목균형표 분석을 위한 데이터가 부족합니다.")
                return None
                
            conversion = (df['high'].rolling(window=9).max() + 
                        df['low'].rolling(window=9).min()) / 2
            
            base = (df['high'].rolling(window=26).max() + 
                   df['low'].rolling(window=26).min()) / 2
            
            leading_span1 = ((conversion + base) / 2).shift(26)
            leading_span2 = ((df['high'].rolling(window=52).max() + 
                            df['low'].rolling(window=52).min()) / 2).shift(26)
            
            lagging_span = df['close'].shift(-26)
            
            current_price = df['close'].iloc[-1]
            
            cloud_state = 'neutral'
            if current_price > leading_span1.iloc[-1] and current_price > leading_span2.iloc[-1]:
                cloud_state = 'above_cloud'
            elif current_price < leading_span1.iloc[-1] and current_price < leading_span2.iloc[-1]:
                cloud_state = 'below_cloud'
                
            conversion_base = 'bullish' if conversion.iloc[-1] > base.iloc[-1] else 'bearish'
            
            return {
                'conversion': float(conversion.iloc[-1]),
                'base': float(base.iloc[-1]),
                'leading_span1': float(leading_span1.iloc[-1]),
                'leading_span2': float(leading_span2.iloc[-1]),
                'lagging_span': float(lagging_span.iloc[-1]),
                'cloud_state': cloud_state,
                'conversion_base': conversion_base
            }
            
        except Exception as e:
            logger.error(f"일목균형표 분석 중 오류 발생: {e}")
            return None

    def analyze_stochastic(self, df: pd.DataFrame) -> Optional[Dict[str, Any]]:
        """스토캐스틱 분석"""
        try:
            if len(df) < self.stoch_params['k']:
                logger.warning("스토캐스틱 분석을 위한 데이터가 부족합니다.")
                return None
                
            low_min = df['low'].rolling(window=self.stoch_params['k']).min()
            high_max = df['high'].rolling(window=self.stoch_params['k']).max()
            
            k = 100 * ((df['close'] - low_min) / (high_max - low_min))
            d = k.rolling(window=self.stoch_params['d']).mean()
            
            current_k = k.iloc[-1]
            current_d = d.iloc[-1]
            prev_k = k.iloc[-2]
            prev_d = d.iloc[-2]
            
            # 스토캐스틱 상태
            stoch_state = 'neutral'
            cross = 'none'
            
            # 과매도 구간에서의 골든 크로스
            if current_k <= 20 and current_k > current_d and prev_k <= prev_d:
                stoch_state = 'oversold_cross'
                cross = 'golden'
                
            # 과매수 구간에서의 데드 크로스
            elif current_k >= 80 and current_k < current_d and prev_k >= prev_d:
                stoch_state = 'overbought_cross'
                cross = 'dead'
                
            # 과매수/과매도 구간 확인
            is_overbought = current_k >= 80
            is_oversold = current_k <= 20
            
            return {
                'k': float(current_k),
                'd': float(current_d),
                'state': stoch_state,
                'cross': cross,
                'is_overbought': is_overbought,
                'is_oversold': is_oversold
            }
            
        except Exception as e:
            logger.error(f"스토캐스틱 분석 중 오류 발생: {e}")
            return None

    def analyze_adx(self, df: pd.DataFrame) -> Optional[Dict[str, Any]]:
        """ADX 분석"""
        try:
            if len(df) < self.adx_period:
                logger.warning("ADX 분석을 위한 데이터가 부족합니다.")
                return None
                
            tr1 = df['high'] - df['low']
            tr2 = abs(df['high'] - df['close'].shift())
            tr3 = abs(df['low'] - df['close'].shift())
            tr = pd.concat([tr1, tr2, tr3], axis=1).max(axis=1)
            atr = tr.rolling(window=self.adx_period).mean()
            
            plus_dm = df['high'].diff()
            minus_dm = df['low'].diff()
            plus_dm[plus_dm < 0] = 0
            minus_dm[minus_dm > 0] = 0
            
            tr14 = tr.rolling(window=self.adx_period).sum()
            plus_di14 = 100 * (plus_dm.rolling(window=self.adx_period).sum() / tr14)
            minus_di14 = 100 * (minus_dm.rolling(window=self.adx_period).sum() / tr14)
            
            dx = 100 * abs(plus_di14 - minus_di14) / (plus_di14 + minus_di14)
            adx = dx.rolling(window=self.adx_period).mean()
            
            current_adx = adx.iloc[-1]
            current_plus_di = plus_di14.iloc[-1]
            current_minus_di = minus_di14.iloc[-1]
            
            # 시장 레짐 판단
            market_regime = 'trend' if current_adx >= 25 else 'sideways'
            
            # 추세 방향
            trend_direction = 'up' if current_plus_di > current_minus_di else 'down'
            
            return {
                'adx': float(current_adx),
                'plus_di': float(current_plus_di),
                'minus_di': float(current_minus_di),
                'market_regime': market_regime,
                'trend_direction': trend_direction
            }
            
        except Exception as e:
            logger.error(f"ADX 분석 중 오류 발생: {e}")
            return None

    def _analyze_volatility(self, indicators: Dict[str, Any]) -> str:
        """변동성 분석"""
        try:
            volatility = indicators.get('volatility', 0.02)
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_high'
            elif volatility > self.volatility_thresholds['high']:
                return 'high'
            elif volatility > self.volatility_thresholds['medium']:
                return 'medium'
            elif volatility > self.volatility_thresholds['low']:
                return 'low'
            else:
                return 'very_low'
                
        except Exception as e:
            self.logger.error(f"변동성 분석 중 오류 발생: {e}")
            return 'medium'

    def _analyze_trend(self, indicators: Dict[str, Any]) -> str:
        """추세 분석"""
        try:
            # ADX 기반 추세 강도
            adx = indicators.get('adx', {})
            trend_strength = adx.get('trend_strength', 'weak')
            trend_direction = adx.get('trend_direction', 'neutral')
            
            # MACD 기반 추세 확인
            macd = indicators.get('macd', {})
            macd_state = macd.get('state', 'neutral')
            
            # 일목균형표 기반 추세 확인
            ichimoku = indicators.get('ichimoku', {})
            cloud_state = ichimoku.get('cloud_state', 'neutral')
            conversion_base = ichimoku.get('conversion_base', 'neutral')
            
            if trend_strength == 'strong' and trend_direction == 'up':
                return 'strong_uptrend'
            elif trend_strength == 'strong' and trend_direction == 'down':
                return 'strong_downtrend'
            elif macd_state == 'bullish' and cloud_state == 'above_cloud':
                return 'uptrend'
            elif macd_state == 'bearish' and cloud_state == 'below_cloud':
                return 'downtrend'
            else:
                return 'sideways'
                
        except Exception as e:
            self.logger.error(f"추세 분석 중 오류 발생: {e}")
            return 'sideways'

    def _calculate_rsi(self, prices: pd.Series, period: int = 14) -> float:
        """RSI 계산"""
        try:
            # 가격 변화 계산
            deltas = prices.diff()
            
            # 상승/하락 구분
            gains = deltas.where(deltas > 0, 0)
            losses = -deltas.where(deltas < 0, 0)
            
            # 평균 계산
            avg_gains = gains.rolling(window=period).mean()
            avg_losses = losses.rolling(window=period).mean()
            
            # RSI 계산
            rs = avg_gains / avg_losses
            rsi = 100 - (100 / (1 + rs))
            
            return float(rsi.iloc[-1])
            
        except Exception as e:
            self.logger.error(f"RSI 계산 중 오류 발생: {str(e)}")
            return 50.0  # 기본값

    def analyze_momentum(self, prices: pd.Series) -> Dict[str, Any]:
        """
        시장 모멘텀 분석
        """
        try:
            # RSI 계산
            rsi_value = self._calculate_rsi(prices)
            
            # MACD 계산
            exp1 = prices.ewm(span=12, adjust=False).mean()
            exp2 = prices.ewm(span=26, adjust=False).mean()
            macd = exp1 - exp2
            signal = macd.ewm(span=9, adjust=False).mean()
            histogram = macd - signal
            
            # 스토캐스틱 계산
            low_min = prices.rolling(window=14).min()
            high_max = prices.rolling(window=14).max()
            k = 100 * (prices - low_min) / (high_max - low_min)
            d = k.rolling(window=3).mean()
            
            # 모멘텀 점수 계산 (0-100)
            momentum_score = 0
            
            # RSI 기반 점수 (0-40)
            if rsi_value > 70:
                momentum_score += 40
            elif rsi_value > 60:
                momentum_score += 30
            elif rsi_value > 50:
                momentum_score += 20
            elif rsi_value > 40:
                momentum_score += 10
            
            # MACD 기반 점수 (0-30)
            if histogram.iloc[-1] > 0:
                momentum_score += 30
            elif histogram.iloc[-1] > -0.5:
                momentum_score += 15
            
            # 스토캐스틱 기반 점수 (0-30)
            if k.iloc[-1] > 80:
                momentum_score += 30
            elif k.iloc[-1] > 60:
                momentum_score += 20
            elif k.iloc[-1] > 40:
                momentum_score += 10
            
            momentum_state = 'strong' if momentum_score > 80 else \
                            'moderate' if momentum_score > 50 else \
                            'weak'
            
            return {
                'score': momentum_score,
                'state': momentum_state,
                'rsi': rsi_value,
                'macd': {
                    'value': float(macd.iloc[-1]),
                    'signal': float(signal.iloc[-1]),
                    'histogram': float(histogram.iloc[-1])
                },
                'stochastic': {
                    'k': float(k.iloc[-1]),
                    'd': float(d.iloc[-1])
                }
            }
            
        except Exception as e:
            self.logger.error(f"모멘텀 분석 중 오류 발생: {str(e)}")
            return {
                'score': 50,
                'state': 'neutral',
                'rsi': 50,
                'macd': {'value': 0, 'signal': 0, 'histogram': 0},
                'stochastic': {'k': 50, 'd': 50}
            }

    def _evaluate_risk_level(self, volatility: str, trend: str, momentum: str) -> str:
        """리스크 레벨 평가"""
        try:
            # 변동성 기반 리스크 평가
            if volatility == 'very_high':
                return 'very_high'
            elif volatility == 'high':
                return 'high'
                
            # 추세 기반 리스크 평가
            if trend == 'strong_uptrend':
                return 'low'
            elif trend == 'strong_downtrend':
                return 'high'
                
            # 모멘텀 기반 리스크 평가
            if momentum == 'overbought':
                return 'high'
            elif momentum == 'oversold':
                return 'low'
                
            return 'medium'
            
        except Exception as e:
            self.logger.error(f"리스크 레벨 평가 중 오류 발생: {e}")
            return 'medium'

    def determine_market_state(self, analysis: Dict[str, Any]) -> str:
        """시장 상태 결정
        
        Args:
            analysis: 시장 분석 데이터
            
        Returns:
            str: 시장 상태
        """
        try:
            rsi_data = analysis.get('rsi_analysis', {})
            adx_data = analysis.get('adx_analysis', {})
            bb_data = analysis.get('bollinger_analysis', {})
            
            rsi = rsi_data.get('value', 50)
            adx = adx_data.get('adx', 20)
            trend_direction = adx_data.get('trend_direction', '')
            volatility = bb_data.get('volatility', 'normal')
            
            # 강한 추세 확인
            if adx > 25:
                if trend_direction == 'up' and rsi > 60:
                    return 'strong_uptrend'
                elif trend_direction == 'down' and rsi < 40:
                    return 'strong_downtrend'
                    
            # 횡보장 확인
            if adx < 20:
                if 40 <= rsi <= 60:
                    return 'sideways'
                    
            # 변동성 기반 상태
            if volatility == 'high':
                if rsi > self.rsi_thresholds['overbought']:
                    return 'overbought_volatile'
                elif rsi < self.rsi_thresholds['oversold']:
                    return 'oversold_volatile'
                return 'high_volatility'
                
            return 'normal'  # 기본 상태
            
        except Exception as e:
            logger.error(f"시장 상태 결정 중 오류 발생: {e}")
            return 'normal'

    def calculate_risk_level(self, analysis: Dict[str, Any]) -> str:
        """리스크 레벨 계산"""
        try:
            if not analysis:
                return 'unknown'
                
            if analysis['volatility'] > self.volatility_thresholds['high']:
                return 'very_high'
            elif analysis['volatility'] > self.volatility_thresholds['medium']:
                return 'high'
            elif analysis['rsi']['state'] in ['overbought', 'oversold']:
                return 'high'
            elif analysis['bollinger']['squeeze']:
                return 'high'
            elif analysis['macd']['state'] == 'bearish' and analysis['macd']['hist_direction'] == 'down':
                return 'high'
            elif analysis['adx']['market_regime'] == 'weak':
                return 'medium'
            elif analysis['trend']['strength'] < 0.3:
                return 'medium'
            else:
                return 'low'
                
        except Exception as e:
            logger.error(f"리스크 레벨 계산 중 오류 발생: {e}")
            return 'unknown'

    def get_market_state(self) -> str:
        """현재 시장 상태 반환"""
        try:
            if not hasattr(self, 'last_market_state'):
                return 'unknown'
            return self.last_market_state
        except Exception as e:
            logger.error(f"시장 상태 조회 중 오류 발생: {e}")
            return 'unknown'

    def get_trading_signals(self, market_condition: Dict[str, Any]) -> Dict[str, Any]:
        """시장 상태에 따른 매매 신호 생성"""
        try:
            if not market_condition:
                return {'signal': 'none', 'stop_loss': None, 'take_profit': None}
            
            regime = market_condition.get('regime')
            signals = {'signal': 'none', 'stop_loss': None, 'take_profit': None}
            
            if regime == 'trend':
                # 추세장 매매 신호
                trend_direction = market_condition.get('trend_direction')
                adx_value = market_condition.get('adx_value', 0)
                rsi_value = market_condition.get('rsi_value', 0)
                macd_cross = market_condition.get('macd_cross', '')
                bb_position = market_condition.get('bb_position', '')
                
                if trend_direction == 'up' and adx_value >= 25:
                    # 상승 추세 진입 조건
                    if (rsi_value < 50 and 
                        macd_cross == 'bullish' and 
                        bb_position == 'upper_break'):
                        signals['signal'] = 'long'
                        signals['stop_loss'] = 'trailing'
                        
                elif trend_direction == 'down' and adx_value >= 25:
                    # 하락 추세 진입 조건
                    if (rsi_value > 50 and 
                        macd_cross == 'bearish' and 
                        bb_position == 'lower_break'):
                        signals['signal'] = 'short'
                        signals['stop_loss'] = 'trailing'
                        
                # 청산 조건
                if signals['signal'] == 'long':
                    if (rsi_value > 70 or 
                        macd_cross == 'bearish' or 
                        bb_position == 'upper_exit'):
                        signals['signal'] = 'close_long'
                        
                elif signals['signal'] == 'short':
                    if (rsi_value < 30 or 
                        macd_cross == 'bullish' or 
                        bb_position == 'lower_exit'):
                        signals['signal'] = 'close_short'
                        
            else:
                # 횡보장 매매 신호
                rsi_value = market_condition.get('rsi_value', 0)
                stoch_cross = market_condition.get('stoch_cross', '')
                bb_position = market_condition.get('bb_position', '')
                
                # 횡보장 진입 조건
                if (rsi_value < 30 and 
                    stoch_cross == 'bullish' and 
                    bb_position == 'lower_break'):
                    signals['signal'] = 'long'
                    signals['stop_loss'] = 'fixed'
                    signals['stop_loss_pct'] = 0.005  # 0.5% 고정 손절
                    
                elif (rsi_value > 70 and 
                      stoch_cross == 'bearish' and 
                      bb_position == 'upper_break'):
                    signals['signal'] = 'short'
                    signals['stop_loss'] = 'fixed'
                    signals['stop_loss_pct'] = 0.005
                    
                # 횡보장 청산 조건
                if signals['signal'] == 'long':
                    if (rsi_value > 70 or 
                        stoch_cross == 'bearish' or 
                        bb_position == 'upper_exit'):
                        signals['signal'] = 'close_long'
                        
                elif signals['signal'] == 'short':
                    if (rsi_value < 30 or 
                        stoch_cross == 'bullish' or 
                        bb_position == 'lower_exit'):
                        signals['signal'] = 'close_short'
            
            return signals
            
        except Exception as e:
            logger.error(f"매매 신호 생성 중 오류 발생: {e}")
            return {'signal': 'none', 'stop_loss': None, 'take_profit': None}

    def analyze(self, data):
        """
        시장 데이터를 분석하여 다양한 기술적 지표와 시장 상태를 반환합니다.
        
        Args:
            data: 시장 데이터 (OHLCV)
            
        Returns:
            Dict: 분석 결과를 담은 딕셔너리
        """
        try:
            # 기본 데이터 준비
            analysis = {
                'price': float(data['close']),
                'volume': float(data['volume']),
                'timestamp': data['timestamp']
            }
            
            # RSI 계산
            rsi = self._calculate_rsi(pd.Series(data))
            analysis['rsi'] = float(rsi) if not pd.isna(rsi) else 50.0
            
            # 볼린저 밴드 계산
            bb = self.calculate_bollinger_bands(pd.DataFrame({'close': [data['close']]}))
            analysis['bollinger'] = {
                'upper': float(bb['upper'].iloc[-1]),
                'middle': float(bb['middle'].iloc[-1]),
                'lower': float(bb['lower'].iloc[-1])
            }
            
            # 변동성 계산
            analysis['volatility'] = float(data.get('volatility', 0.0))
            
            # 시장 상태 판단
            analysis['market_state'] = self._determine_market_state(analysis)
            
            # 추세 강도 계산
            analysis['trend_strength'] = self._calculate_trend_strength(analysis)
            
            return analysis
            
        except Exception as e:
            self.logger.error(f"시장 분석 중 오류 발생: {e}")
            # 기본값 반환
            return {
                'price': float(data['close']),
                'volume': float(data['volume']),
                'timestamp': data['timestamp'],
                'rsi': 50.0,
                'bollinger': {
                    'upper': float(data['close']) * 1.02,
                    'middle': float(data['close']),
                    'lower': float(data['close']) * 0.98
                },
                'volatility': 0.0,
                'market_state': 'neutral',
                'trend_strength': 'weak'
            }

    def _determine_market_state(self, analysis: Dict[str, Any]) -> str:
        """시장 상태 결정
        
        Args:
            analysis: 시장 분석 데이터
            
        Returns:
            str: 시장 상태
        """
        try:
            rsi_data = analysis.get('rsi_analysis', {})
            adx_data = analysis.get('adx_analysis', {})
            bb_data = analysis.get('bollinger_analysis', {})
            
            rsi = rsi_data.get('value', 50)
            adx = adx_data.get('adx', 20)
            trend_direction = adx_data.get('trend_direction', '')
            volatility = bb_data.get('volatility', 'normal')
            
            # 강한 추세 확인
            if adx > 25:
                if trend_direction == 'up' and rsi > 60:
                    return 'strong_uptrend'
                elif trend_direction == 'down' and rsi < 40:
                    return 'strong_downtrend'
                    
            # 횡보장 확인
            if adx < 20:
                if 40 <= rsi <= 60:
                    return 'sideways'
                    
            # 변동성 기반 상태
            if volatility == 'high':
                if rsi > self.rsi_thresholds['overbought']:
                    return 'overbought_volatile'
                elif rsi < self.rsi_thresholds['oversold']:
                    return 'oversold_volatile'
                return 'high_volatility'
                
            return 'normal'  # 기본 상태
            
        except Exception as e:
            logger.error(f"시장 상태 결정 중 오류 발생: {e}")
            return 'normal'

    def _calculate_trend_strength(self, analysis: Dict[str, Any]) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _calculate_rsi(self, data: pd.Series, period: int = 14) -> float:
        """RSI 계산"""
        try:
            delta = data.diff()
            gain = (delta.where(delta > 0, 0)).rolling(window=period).mean()
            loss = (-delta.where(delta < 0, 0)).rolling(window=period).mean()
            
            rs = gain / loss
            rsi = 100 - (100 / (1 + rs))
            
            return float(rsi.iloc[-1]) if not pd.isna(rsi.iloc[-1]) else 50.0
        except Exception as e:
            self.logger.error(f"RSI 계산 중 오류 발생: {e}")
            return 50.0

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: Dict[str, Any]) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
            if ma_medium.iloc[-1] == 0:
                return 0.5
                
            short_vs_medium = (ma_short.iloc[-1] - ma_medium.iloc[-1]) / ma_medium.iloc[-1]
            strength = abs(short_vs_medium)
            return float(min(max(strength, 0), 1))
            
        except Exception:
            return 0.5

    def _calculate_trend_strength(self, analysis: dict) -> str:
        """추세 강도 계산"""
        try:
            volatility = analysis['volatility']
            
            if volatility > self.volatility_thresholds['very_high']:
                return 'very_strong'
            elif volatility > self.volatility_thresholds['high']:
                return 'strong'
            elif volatility > self.volatility_thresholds['medium']:
                return 'moderate'
            elif volatility > self.volatility_thresholds['low']:
                return 'weak'
            else:
                return 'very_weak'
        except Exception as e:
            self.logger.error(f"추세 강도 계산 중 오류 발생: {e}")
            return 'moderate'

    def _determine_market_state(self, analysis: dict) -> str:
        """시장 상태 판단"""
        try:
            rsi = analysis['rsi']
            volatility = analysis['volatility']
            
            if rsi > self.rsi_thresholds['overbought']:
                if volatility > self.volatility_thresholds['high']:
                    return 'overbought_volatile'
                return 'overbought_stable'
            elif rsi < self.rsi_thresholds['oversold']:
                if volatility > self.volatility_thresholds['high']:
                    return 'oversold_volatile'
                return 'oversold_stable'
            else:
                if volatility > self.volatility_thresholds['high']:
                    return 'neutral_volatile'
                return 'neutral_stable'
        except Exception as e:
            self.logger.error(f"시장 상태 판단 중 오류 발생: {e}")
            return 'neutral_stable'

    def _calculate_trend_strength(self, ma_short: pd.Series, ma_medium: pd.Series) -> float:
        """트렌드 강도 계산"""
        try:
                return 'moderate